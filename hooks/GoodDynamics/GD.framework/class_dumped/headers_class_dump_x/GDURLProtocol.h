/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

#import "_CATransform3DMakeScale.h"

#import "GDURLProtocolHttpAdapterDelegate-Protocol.h"
#import "NSURLAuthenticationChallengeSender-Protocol.h"

@class NSArray, NSCachedURLResponse, NSHTTPURLResponse, NSMutableDictionary, NSMutableURLRequest, NSObject<OS_dispatch_queue>, NSString, NSThread, NSTimer, NSURLCache, NSURLCredential, NSURLProtectionSpace;

@interface GDURLProtocol : _CATransform3DMakeScale <NSURLAuthenticationChallengeSender, GDURLProtocolHttpAdapterDelegate>
{
    struct GDURLProtocolHttpAdapter m_http_adapter;
    BOOL m_sentHeaders;
    BOOL m_cancelled;
    BOOL m_finishNeeded;
    BOOL m_waitForAuthResponse;
    int m_authFailCount;
    const char *m_username;
    const char *m_password;
    const char *m_authtype;
    BOOL m_rejectAuthSupported;
    BOOL m_isKCDRequest;
    int m_proxyPort;
    unsigned int m_totalBytes;
    double m_timestamp;
    int m_peekedBytes;
    NSObject<OS_dispatch_queue> *m_loadingEventsQueue;
    BOOL _isBrowser;
    BOOL _isLoading;
    BOOL _didFollowLocation;
    NSURLCredential *_credential;
    NSURLProtectionSpace *_credentialSpace;
    NSMutableDictionary *_wwwChallenges;
    NSString *_authMethod;
    NSString *_proxyHost;
    NSString *_proxyUsername;
    NSString *_proxyPassword;
    NSString *_proxyAuthtype;
    NSMutableURLRequest *_actualRequest;
    NSCachedURLResponse *_gdCachedResponse;
    NSHTTPURLResponse *_response;
    NSURLCache *_cache;
    NSString *_cacheSessionID;
    NSTimer *_activityTimer;
    NSThread *_loadingThread;
    NSArray *_modes;
    NSString *_sessionId;
}

+ (void)unregisterGDURLProtocol;
+ (void)registerGDURLProtocol;
+ (int)checkAuthForMethod:(id)fp8;
+ (void)removeAuthForMethod:(id)fp8;
+ (void)setProperty:(id)fp8 forKey:(id)fp12 forServerInRequest:(id)fp16;
+ (id)getPropertyForKey:(id)fp8 forServerInRequest:(id)fp12;
+ (id)getAuthStringForAuthType:(id)fp8;
+ (id)getAuthTypeForAuthString:(id)fp8;
+ (id)getSchemeforRequest:(id)fp8;
+ (id)getPortforRequest:(id)fp8;
+ (id)handleRedirectMethod:(id)fp8 allow:(id)fp12 location:(id)fp16 status:(unsigned int)fp20;
+ (void)doRegisterGDURLProtocol:(BOOL)fp8;
+ (id)handleXHRHeaderCode:(id)fp8;
+ (id)handleXHRAllHeaderCode:(id)fp8;
+ (id)handleXHRStatusCode:(id)fp8;
+ (id)handleXHRCode:(id)fp8;
+ (id)replaceDelimitersWithSpace:(id)fp8 delimiters:(id)fp12;
+ (id)minimumRequestHeadersForRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
+ (id)urlStringWithoutQueryString:(id)fp8;
- (void)setSessionId:(id)fp8;
- (id)sessionId;
- (void)setDidFollowLocation:(BOOL)fp8;
- (BOOL)didFollowLocation;
- (void)setIsLoading:(BOOL)fp8;
- (BOOL)isLoading;
- (void)setIsBrowser:(BOOL)fp8;
- (BOOL)isBrowser;
- (void)setModes:(id)fp8;
- (id)modes;
- (void)setLoadingThread:(id)fp8;
- (id)loadingThread;
- (void)setActivityTimer:(id)fp8;
- (id)activityTimer;
- (void)setCacheSessionID:(id)fp8;
- (id)cacheSessionID;
- (void)setCache:(id)fp8;
- (id)cache;
- (void)setResponse:(id)fp8;
- (id)response;
- (void)setGdCachedResponse:(id)fp8;
- (id)gdCachedResponse;
- (void)setActualRequest:(id)fp8;
- (id)actualRequest;
- (void)setProxyAuthtype:(id)fp8;
- (id)proxyAuthtype;
- (void)setProxyPassword:(id)fp8;
- (id)proxyPassword;
- (void)setProxyUsername:(id)fp8;
- (id)proxyUsername;
- (void)setProxyHost:(id)fp8;
- (id)proxyHost;
- (void)setAuthMethod:(id)fp8;
- (id)authMethod;
- (void)setWwwChallenges:(id)fp8;
- (id)wwwChallenges;
- (void)setCredentialSpace:(id)fp8;
- (id)credentialSpace;
- (void)setCredential:(id)fp8;
- (id)credential;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)clientResponse;
- (id)errorWithCode:(int)fp8 additionalUserInfo:(id)fp12;
- (id)errorWithCode:(int)fp8;
- (void)initCache;
- (void)initRunloop;
- (void)initSessionId;
- (void)logWithLevel:(int)fp8 message:(const char *)fp12;
- (void)cancelTimer;
- (void)rescheduleTimer;
- (void)timeoutHandler:(id)fp8;
- (void)askDelegateForClientCredential;
- (void)askDelegateToVerifyPeer;
- (void)performDefaultHandlingForAuthenticationChallenge:(id)fp8;
- (void)rejectProtectionSpaceAndContinueWithChallenge:(id)fp8;
- (void)useCredential:(id)fp8 forAuthenticationChallenge:(id)fp12;
- (void)continueWithoutCredentialForAuthenticationChallenge:(id)fp8;
- (void)cancelAuthenticationChallenge:(id)fp8;
- (void)_didFinishViaRoute:(id)fp8;
- (void)didFinishViaRoute:(id)fp8;
- (void)_didLoadDataViaRoute:(id)fp8;
- (void)didLoadDataViaRoute:(id)fp8;
- (void)_didHeadersReceivedViaRoute:(id)fp8;
- (void)didHeadersReceivedViaRoute:(id)fp8;
- (void)_willSendVia:(id)fp8;
- (void)willSendVia:(id)fp8;
- (void)requireClientAuthentication;
- (void)requireCertificateVerification;
- (void)setBrowserMode;
- (void)cancelLoading;
- (void)doFinishedLoading;
- (void)handleCaching:(id)fp8 lastChunk:(BOOL)fp12;
- (void)doLoadData;
- (id)readDataAndConsume:(BOOL)fp8;
- (void)doHeadersReceived;
- (unsigned int)_contentLength;
- (id)highestAuthChallenge;
- (BOOL)checkProxyCredentials;
- (void)checkCredentials;
- (BOOL)shouldDisableHostVerification;
- (BOOL)shouldDisablePeerVerification;
- (void)dealloc;
- (id)initWithRequest:(id)fp8 cachedResponse:(id)fp12 client:(id)fp16;
- (void)stopLoading;
- (void)requestStreamToData:(id)fp8;
- (void)sendRequest;
- (void)openRequest;
- (void)startLoading;
- (void)clientDidFinishLoading;
- (void)didFinishLoading;
- (void)clientDidReceiveAuthenticationChallenge:(id)fp8;
- (void)didReceiveAuthenticationChallenge:(id)fp8;
- (void)clientDidReceiveResponse:(id)fp8;
- (void)didReceiveResponse;
- (void)clientWasRedirectedToRequest:(id)fp8;
- (void)wasRedirectedToRequest:(id)fp8;
- (void)doWillCacheResponse;
- (void)clientCachedResponseIsValid;
- (void)cachedResponseIsValid;
- (void)didSendBody:(id)fp8;
- (void)clientDidLoadData:(id)fp8;
- (void)didLoadData:(id)fp8;
- (void)clientDidFailWithError:(id)fp8;
- (void)didFailWithError:(id)fp8;
- (void)didConnectVia:(id)fp8;
- (BOOL)willConnectVia:(id *)fp8;
- (BOOL)willSendRequest;

@end

