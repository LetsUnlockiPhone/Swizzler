%group GDDumpedHeaders
//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

// #import "NSURLProtocol.h"

// #import "GDURLProtocolHttpAdapterDelegate.h"
// #import "NSURLAuthenticationChallengeSender.h"

// @class NSArray, NSCachedURLResponse, NSHTTPURLResponse, NSMutableDictionary, NSMutableURLRequest, NSObject<OS_dispatch_queue>, NSString, NSThread, NSTimer, NSURLCache, NSURLCredential, NSURLProtectionSpace;

// @interface GDURLProtocol : NSURLProtocol <NSURLAuthenticationChallengeSender, GDURLProtocolHttpAdapterDelegate>
// {
//     struct GDURLProtocolHttpAdapter m_http_adapter;
//     BOOL m_sentHeaders;
//     BOOL m_cancelled;
//     BOOL m_finishNeeded;
//     BOOL m_waitForAuthResponse;
//     int m_authFailCount;
//     const char *m_username;
//     const char *m_password;
//     const char *m_authtype;
//     BOOL m_rejectAuthSupported;
//     BOOL m_isKCDRequest;
//     int m_proxyPort;
//     unsigned int m_totalBytes;
//     double m_timestamp;
//     int m_peekedBytes;
//     NSObject<OS_dispatch_queue> *m_loadingEventsQueue;
//     BOOL _isBrowser;
//     BOOL _isLoading;
//     BOOL _didFollowLocation;
//     NSURLCredential *_credential;
//     NSURLProtectionSpace *_credentialSpace;
//     NSMutableDictionary *_wwwChallenges;
//     NSString *_authMethod;
//     NSString *_proxyHost;
//     NSString *_proxyUsername;
//     NSString *_proxyPassword;
//     NSString *_proxyAuthtype;
//     NSMutableURLRequest *_actualRequest;
//     NSCachedURLResponse *_gdCachedResponse;
//     NSHTTPURLResponse *_response;
//     NSURLCache *_cache;
//     NSString *_cacheSessionID;
//     NSTimer *_activityTimer;
//     NSThread *_loadingThread;
//     NSArray *_modes;
//     NSString *_sessionId;
// }
%hook GDURLProtocol
// + (void)unregisterGDURLProtocol;
// + (void)registerGDURLProtocol;
// + (int)checkAuthForMethod:(id)arg1;
// + (void)removeAuthForMethod:(id)arg1;
// + (void)setProperty:(id)arg1 forKey:(id)arg2 forServerInRequest:(id)arg3;
// + (id)getPropertyForKey:(id)arg1 forServerInRequest:(id)arg2;
// + (id)getAuthStringForAuthType:(id)arg1;
// + (id)getAuthTypeForAuthString:(id)arg1;
// + (id)getSchemeforRequest:(id)arg1;
// + (id)getPortforRequest:(id)arg1;
// + (id)handleRedirectMethod:(id)arg1 allow:(id)arg2 location:(id)arg3 status:(unsigned int)arg4;
// + (void)doRegisterGDURLProtocol:(BOOL)arg1;
// + (id)handleXHRHeaderCode:(id)arg1;
// + (id)handleXHRAllHeaderCode:(id)arg1;
// + (id)handleXHRStatusCode:(id)arg1;
// + (id)handleXHRCode:(id)arg1;
// + (id)replaceDelimitersWithSpace:(id)arg1 delimiters:(id)arg2;
// + (id)minimumRequestHeadersForRequest:(id)arg1;
// + (id)canonicalRequestForRequest:(id)arg1;
// + (BOOL)canInitWithRequest:(id)arg1;
// + (BOOL)requestIsCacheEquivalent:(id)arg1 toRequest:(id)arg2;
// + (id)urlStringWithoutQueryString:(id)arg1;
// @property(retain) NSString *sessionId; // @synthesize sessionId=_sessionId;
// @property BOOL didFollowLocation; // @synthesize didFollowLocation=_didFollowLocation;
// @property BOOL isLoading; // @synthesize isLoading=_isLoading;
// @property BOOL isBrowser; // @synthesize isBrowser=_isBrowser;
// @property(retain) NSArray *modes; // @synthesize modes=_modes;
// @property(retain) NSThread *loadingThread; // @synthesize loadingThread=_loadingThread;
// @property(retain) NSTimer *activityTimer; // @synthesize activityTimer=_activityTimer;
// @property(retain) NSString *cacheSessionID; // @synthesize cacheSessionID=_cacheSessionID;
// @property(retain) NSURLCache *cache; // @synthesize cache=_cache;
// @property(retain) NSHTTPURLResponse *response; // @synthesize response=_response;
// @property(retain) NSCachedURLResponse *gdCachedResponse; // @synthesize gdCachedResponse=_gdCachedResponse;
// @property(retain) NSMutableURLRequest *actualRequest; // @synthesize actualRequest=_actualRequest;
// @property(retain) NSString *proxyAuthtype; // @synthesize proxyAuthtype=_proxyAuthtype;
// @property(retain) NSString *proxyPassword; // @synthesize proxyPassword=_proxyPassword;
// @property(retain) NSString *proxyUsername; // @synthesize proxyUsername=_proxyUsername;
// @property(retain) NSString *proxyHost; // @synthesize proxyHost=_proxyHost;
// @property(retain) NSString *authMethod; // @synthesize authMethod=_authMethod;
// @property(retain) NSMutableDictionary *wwwChallenges; // @synthesize wwwChallenges=_wwwChallenges;
// @property(retain) NSURLProtectionSpace *credentialSpace; // @synthesize credentialSpace=_credentialSpace;
// @property(retain) NSURLCredential *credential; // @synthesize credential=_credential;
// - (id).cxx_construct;
// - (void).cxx_destruct;
// - (id)clientResponse;
// - (id)errorWithCode:(int)arg1 additionalUserInfo:(id)arg2;
// - (id)errorWithCode:(int)arg1;
// - (void)initCache;
// - (void)initRunloop;
// - (void)initSessionId;
// - (void)logWithLevel:(int)arg1 message:(const char *)arg2;
// - (void)cancelTimer;
// - (void)rescheduleTimer;
// - (void)timeoutHandler:(id)arg1;
// - (void)askDelegateForClientCredential;
// - (void)askDelegateToVerifyPeer;
// - (void)performDefaultHandlingForAuthenticationChallenge:(id)arg1;
// - (void)rejectProtectionSpaceAndContinueWithChallenge:(id)arg1;
// - (void)useCredential:(id)arg1 forAuthenticationChallenge:(id)arg2;
// - (void)continueWithoutCredentialForAuthenticationChallenge:(id)arg1;
// - (void)cancelAuthenticationChallenge:(id)arg1;
// - (void)_didFinishViaRoute:(id)arg1;
// - (void)didFinishViaRoute:(id)arg1;
// - (void)_didLoadDataViaRoute:(id)arg1;
// - (void)didLoadDataViaRoute:(id)arg1;
// - (void)_didHeadersReceivedViaRoute:(id)arg1;
// - (void)didHeadersReceivedViaRoute:(id)arg1;
// - (void)_willSendVia:(id)arg1;
// - (void)willSendVia:(id)arg1;
// - (void)requireClientAuthentication;
// - (void)requireCertificateVerification;
// - (void)setBrowserMode;
// - (void)cancelLoading;
// - (void)doFinishedLoading;
// - (void)handleCaching:(id)arg1 lastChunk:(BOOL)arg2;
// - (void)doLoadData;
// - (id)readDataAndConsume:(BOOL)arg1;
// - (void)doHeadersReceived;
// - (unsigned int)_contentLength;
// - (id)highestAuthChallenge;
// - (BOOL)checkProxyCredentials;
// - (void)checkCredentials;
// - (BOOL)shouldDisableHostVerification;
// - (BOOL)shouldDisablePeerVerification;
// - (void)dealloc;
// - (id)initWithRequest:(id)arg1 cachedResponse:(id)arg2 client:(id)arg3;
- (void)stopLoading
{
	DDLogVerbose(@"GDURLProtocol stopLoading");
	%orig;
}
// - (void)requestStreamToData:(id)arg1;
- (void)sendRequest
{
	DDLogVerbose(@"GDURLProtocol sendRequest");
	%orig;
}
- (void)openRequest
{
	DDLogVerbose(@"GDURLProtocol openRequest");
	%orig;
}
- (void)startLoading
{
	DDLogVerbose(@"GDURLProtocol startLoading");
	%orig;
}
- (void)clientDidFinishLoading
{
	DDLogVerbose(@"GDURLProtocol clientDidFinishLoading");
	%orig;
}
- (void)didFinishLoading
{
	DDLogVerbose(@"GDURLProtocol didFinishLoading");
	%orig;
}
// - (void)clientDidReceiveAuthenticationChallenge:(id)arg1;
// - (void)didReceiveAuthenticationChallenge:(id)arg1;
// - (void)clientDidReceiveResponse:(id)arg1;
- (void)didReceiveResponse
{
	DDLogVerbose(@"GDURLProtocol didReceiveResponse");
	%orig;
}
// - (void)clientWasRedirectedToRequest:(id)arg1;
// - (void)wasRedirectedToRequest:(id)arg1;
- (void)doWillCacheResponse
{
	DDLogVerbose(@"GDURLProtocol doWillCacheResponse");
	%orig;
}
- (void)clientCachedResponseIsValid
{
	DDLogVerbose(@"GDURLProtocol clientCachedResponseIsValid");
	%orig;
}
- (void)cachedResponseIsValid
{
	DDLogVerbose(@"GDURLProtocol cachedResponseIsValid");
	%orig;
}
// - (void)didSendBody:(id)arg1;
// - (void)clientDidLoadData:(id)arg1;
// - (void)didLoadData:(id)arg1;
// - (void)clientDidFailWithError:(id)arg1;
// - (void)didFailWithError:(id)arg1;
// - (void)didConnectVia:(id)arg1;
// - (BOOL)willConnectVia:(id *)arg1;
// - (BOOL)willSendRequest;

// // Remaining properties
// @property(readonly, copy) NSString *debugDescription;
// @property(readonly, copy) NSString *description;
// @property(readonly) unsigned int hash;
// @property(readonly) Class superclass;

// @end
%end
%end