//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

//
// SDK Root: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.1.sdk/
//

#import "UIViewController.h"

#import "GTCalendarViewDataSource.h"
#import "GTDataLoadingProtocol.h"
#import "UIPopoverControllerDelegate.h"

@class GTCalendarDataSourceCache, GTCalendarDayViewController, GTCalendarInfiniteListViewController, GTCalendarMonthViewController, GTCalendarWeekViewController, NSDate, NSOperationQueue, NSTimer, UIView, UIViewController<GTCalendarViewControllerModule>;

@interface GTCalendarViewController : UIViewController <GTCalendarViewDataSource, UIPopoverControllerDelegate, GTDataLoadingProtocol>
{
    NSDate *_lowerDateBoundary;
    NSDate *_upperDateBoundary;
    NSDate *_estimatedLowerDate;
    id <GTCalendarDataSourceDelegate> _dataSourceDelegate;
    id <GTCalendarViewControllerDelegate> _delegate;
    UIViewController<GTCalendarViewControllerModule> *_currentViewController;
    GTCalendarDayViewController *_dayViewController;
    GTCalendarWeekViewController *_weekViewController;
    GTCalendarMonthViewController *_monthViewController;
    GTCalendarInfiniteListViewController *_infiniteListViewController;
    GTCalendarDataSourceCache *_dataSourceCache;
    GTCalendarDataSourceCache *_infiniteListViewDataSoureCache;
    GTCalendarDataSourceCache *_monthDataSourceCache;
    NSDate *_startDate;
    NSDate *_endDate;
    NSOperationQueue *_dataLoadingQueue;
    NSTimer *_currentDayTimer;
    UIView *_customDatePicker;
    UIView *_blockingView;
}

@property(retain, nonatomic) UIView *blockingView; // @synthesize blockingView=_blockingView;
@property(retain, nonatomic) UIView *customDatePicker; // @synthesize customDatePicker=_customDatePicker;
@property(retain, nonatomic) NSTimer *currentDayTimer; // @synthesize currentDayTimer=_currentDayTimer;
@property(retain, nonatomic) NSOperationQueue *dataLoadingQueue; // @synthesize dataLoadingQueue=_dataLoadingQueue;
@property(retain, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(retain, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
@property(retain, nonatomic) GTCalendarDataSourceCache *monthDataSourceCache; // @synthesize monthDataSourceCache=_monthDataSourceCache;
@property(retain, nonatomic) GTCalendarDataSourceCache *infiniteListViewDataSoureCache; // @synthesize infiniteListViewDataSoureCache=_infiniteListViewDataSoureCache;
@property(retain, nonatomic) GTCalendarDataSourceCache *dataSourceCache; // @synthesize dataSourceCache=_dataSourceCache;
@property(retain, nonatomic) GTCalendarInfiniteListViewController *infiniteListViewController; // @synthesize infiniteListViewController=_infiniteListViewController;
@property(retain, nonatomic) GTCalendarMonthViewController *monthViewController; // @synthesize monthViewController=_monthViewController;
@property(retain, nonatomic) GTCalendarWeekViewController *weekViewController; // @synthesize weekViewController=_weekViewController;
@property(retain, nonatomic) GTCalendarDayViewController *dayViewController; // @synthesize dayViewController=_dayViewController;
@property(retain, nonatomic) UIViewController<GTCalendarViewControllerModule> *currentViewController; // @synthesize currentViewController=_currentViewController;
@property(nonatomic) id <GTCalendarViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) id <GTCalendarDataSourceDelegate> dataSourceDelegate; // @synthesize dataSourceDelegate=_dataSourceDelegate;
@property(retain, nonatomic) NSDate *estimatedLowerDate; // @synthesize estimatedLowerDate=_estimatedLowerDate;
@property(retain, nonatomic) NSDate *upperDateBoundary; // @synthesize upperDateBoundary=_upperDateBoundary;
@property(retain, nonatomic) NSDate *lowerDateBoundary; // @synthesize lowerDateBoundary=_lowerDateBoundary;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (int)numOccurrencesOnOrAfterDate:(id)arg1 fromOccurrences:(id)arg2;
- (int)numOccurrencesOnOrBeforeDate:(id)arg1 fromOccurrences:(id)arg2;
- (BOOL)isWithinDateLimit:(id)arg1 reverse:(BOOL)arg2 lowerDateBoundary:(id)arg3 upperDateBoundary:(id)arg4;
- (id)cacheBucketDataWithDate:(id)arg1;
- (BOOL)shouldLoadAggressiveForDate:(id)arg1 reverse:(BOOL)arg2;
- (id)loadUntilFullWithStartDate:(id)arg1 minResults:(int)arg2 reverse:(BOOL)arg3 buckets:(id)arg4 occurrences:(id)arg5 count:(int *)arg6 operation:(id)arg7;
- (void)loadFilteredCacheFromStartDate:(id)arg1 minResults:(int)arg2 shouldLoadBefore:(BOOL)arg3 operation:(id)arg4 cacheDelegate:(id)arg5 prepareForSwapCallback:(CDUnknownBlockType)arg6;
- (void)loadDataForDay:(id)arg1 operation:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (void)loadDataForMonth:(id)arg1 operation:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (void)cancelLoadingFromStartDate:(id)arg1 toEndDate:(id)arg2 sender:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)loadDataForPeriodFromStartDate:(id)arg1 toEndDate:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)startLoadingCalendarOccurrencesFromStartDate:(id)arg1 toEndDate:(id)arg2 sender:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)hideCustomDatePicker;
- (struct CGRect)datePickerFrameInView:(id)arg1;
- (void)userSelectedDate;
- (void)datePickerOk;
- (void)datePickerCancel;
- (struct CGSize)datePickerSize;
- (void)showCustomDatePicker:(id)arg1;
- (void)addNewEvent:(id)arg1;
- (void)selectDate:(id)arg1;
- (void)goToToday;
- (void)goToDateAndTime:(id)arg1;
- (void)handleSignificantTimeChange:(id)arg1;
- (void)broadcastTimeUpdateNotification:(id)arg1;
- (void)reloadDataCache;
- (void)removeFilteredCache:(id)arg1;
- (id)calendarListFilteredCacheWithStartDate:(id)arg1 endDate:(id)arg2 delegate:(id)arg3;
- (id)allDayFilteredCacheWithStartDate:(id)arg1 endDate:(id)arg2 delegate:(id)arg3;
- (id)filteredCacheForDay:(id)arg1 delegate:(id)arg2;
- (id)compositeFilteredCacheWithStartDate:(id)arg1 endDate:(id)arg2 delegate:(id)arg3;
- (id)filteredCacheWithStartDate:(id)arg1 endDate:(id)arg2 delegate:(id)arg3;
- (void)updateEventWithId:(int)arg1 forDataSourceCache:(id)arg2;
- (void)updateEventWithId:(int)arg1;
- (void)enumerateCacheDateRangeUsingBlock:(CDUnknownBlockType)arg1;
- (void)removeCalendarOccurrencesWithRecordId:(unsigned int)arg1 andNotInArray:(id)arg2 startDate:(id)arg3 endDate:(id)arg4;
- (void)removeAllCalendarOccurrencesWithRecordId:(unsigned int)arg1;
- (void)removeCalendarOccurrences:(id)arg1;
- (void)removeCalendarOccurrence:(id)arg1;
- (void)addOrReplaceCalendarOccurrences:(id)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(int)arg1 duration:(double)arg2;
- (void)viewWillAppear:(BOOL)arg1;
- (void)didReceiveMemoryWarning;
- (void)viewDidLoad;
- (id)calendarViewTitles;
- (void)didSelectModule:(id)arg1 atIndex:(int)arg2;
- (void)changeCalendarView:(int)arg1;
- (void)updateCalendarAppearance;
- (void)timeZoneChanged;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithDataSourceDelegate:(id)arg1;
- (void)dealloc;

@end

