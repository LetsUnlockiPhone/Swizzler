//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

//
// SDK Root: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.1.sdk/
//

#import "NSObject.h"

@class NSDate, NSMutableArray;

@interface AppointmentWrapper : NSObject
{
    struct ACalendarEvent *event;
    unsigned short recordId;
    struct ACalendarRecord calRecord;
    BOOL readOnly;
    NSMutableArray *invitees;
    NSDate *dateTimeStartDisplay;
    NSDate *dateTimeEndDisplay;
    BOOL isShadow;
    struct ACalendarRecord *_pTemplateRecord;
    struct ACalendarRecord _templateRecord;
    unsigned char _dayOfWeekMonthlyMask[5];
    BOOL isAppointmentSubjectRTL;
    BOOL isAppointmentLocationRTL;
    BOOL _isMoreThan32Recipients;
    BOOL _updateForAllAttendees;
    NSDate *_effectiveEndTime;
    NSDate *_effectiveStartTime;
}

+ (int)inviteeGetAvailability:(int)arg1 email:(id)arg2 start:(id)arg3 end:(id)arg4;
+ (void)displayDatesFromDates:(id)arg1;
+ (void)datesFromDisplayDates:(id)arg1;
+ (BOOL)isDifferentDate:(id)arg1 fromDate:(id)arg2;
+ (BOOL)isDifferentString:(id)arg1 fromString:(id)arg2;
+ (BOOL)isDifferentData:(id)arg1 from:(id)arg2;
+ (BOOL)isDifferentInvitees:(id)arg1 from:(id)arg2 checkAvailability:(BOOL)arg3;
+ (BOOL)isDifferentInvitees:(id)arg1 from:(id)arg2;
+ (BOOL)isDifferentNotes:(id)arg1 from:(id)arg2;
+ (BOOL)isDifferentReminder:(id)arg1 from:(id)arg2;
+ (BOOL)isDifferentLocation:(id)arg1 from:(id)arg2;
+ (BOOL)isDifferentSubject:(id)arg1 from:(id)arg2;
+ (id)copyDataOneInstance:(id)arg1 from:(id)arg2;
+ (id)copyData:(id)arg1 from:(id)arg2;
+ (id)date12amFromDate:(id)arg1 nextDay:(BOOL)arg2;
+ (struct CDateTimeBits)nsDateToDateTimeBits:(id)arg1;
+ (id)dateTimeBitsToNsDate:(struct CDateTimeBits)arg1;
+ (id)writeableAppointmentWrapper:(id)arg1;
+ (void)checkTimeZone;
@property(nonatomic) BOOL updateForAllAttendees; // @synthesize updateForAllAttendees=_updateForAllAttendees;
@property(nonatomic) BOOL isMoreThan32Recipients; // @synthesize isMoreThan32Recipients=_isMoreThan32Recipients;
@property(retain, nonatomic) NSMutableArray *invitees; // @synthesize invitees;
@property(retain, nonatomic) NSDate *effectiveStartTime; // @synthesize effectiveStartTime=_effectiveStartTime;
@property(retain, nonatomic) NSDate *effectiveEndTime; // @synthesize effectiveEndTime=_effectiveEndTime;
@property(nonatomic) BOOL isAppointmentLocationRTL; // @synthesize isAppointmentLocationRTL;
@property(nonatomic) BOOL isAppointmentSubjectRTL; // @synthesize isAppointmentSubjectRTL;
@property(readonly, nonatomic) struct ACalendarEvent *event; // @synthesize event;
@property(nonatomic) BOOL readOnly; // @synthesize readOnly;
@property(nonatomic) unsigned short recordId; // @synthesize recordId;
@property(nonatomic) BOOL isShadow; // @synthesize isShadow;
@property(retain, nonatomic) NSDate *dateTimeEndDisplay; // @synthesize dateTimeEndDisplay;
@property(retain, nonatomic) NSDate *dateTimeStartDisplay; // @synthesize dateTimeStartDisplay;
- (id).cxx_construct;
- (void).cxx_destruct;
- (struct NumberOfPeople)numberOfPeopleAndConflictsWithAttendanceType:(int)arg1;
- (int)numberOfPeopleWithAttendanceType:(int)arg1;
- (id)personWithAttendanceType:(int)arg1 atIndex:(int)arg2;
- (void)dealloc;
- (long)calendarRecordInstance;
- (int)numberOfAttachments;
- (id)stringWithMeetingDetails;
- (id)stringWithMeetingDetailsForInstance:(long)arg1;
- (void)adjustRepeatStartEndDatesTimes;
- (id)findNextOccurenceSince:(id)arg1;
- (int)getMeetingResponse;
- (int)getMyResponse;
- (BOOL)amITheOrganizer;
- (BOOL)isMeeting;
- (void)reloadTemplate;
- (void)loadRecord:(unsigned short)arg1 readOnly:(BOOL)arg2;
- (void)ensureReadOnlyRecordLoaded;
- (void)log;
- (void)removeInvitee:(id)arg1;
- (void)addInvitee:(id)arg1;
- (BOOL)isOrganizerAddedToInvitees;
- (int)compareStartDateWithAppointment:(id)arg1;
@property(nonatomic) long updateVersion;
- (void)setPrivate:(BOOL)arg1;
- (BOOL)isPrivate;
- (void)setAvailability:(int)arg1;
- (int)getAvailability;
- (void)setNotes:(id)arg1;
- (id)getNotes;
@property(retain, nonatomic) NSDate *dateTimeEndRepeat;
@property(retain, nonatomic) NSDate *dateTimeStartRepeat;
@property(readonly, nonatomic) int customCount;
@property(nonatomic) int count;
@property(nonatomic) int range;
@property(nonatomic) int recurrenceInstanceOf;
@property(nonatomic) int recurrenceInstance;
@property(nonatomic) int monthOfYear;
@property(nonatomic) BOOL endOfMonth;
@property(nonatomic) int weekEnd;
@property(nonatomic) int dayOfMonthMask;
@property(nonatomic) int dayOfMonth;
@property(nonatomic) unsigned char (*dayOfWeekMonthlyMask)[5];
@property(nonatomic) unsigned char dayOfWeekMask;
@property(nonatomic) int interval;
@property(nonatomic) int pattern;
@property(readonly, nonatomic) BOOL exception;
@property(readonly, nonatomic) BOOL repeat;
- (void)ensureTemplateRecordLoaded;
- (void)setInstance:(int)arg1;
- (int)getInstance;
@property(nonatomic) unsigned long goodId;
- (void)setReminder:(int)arg1;
- (int)getReminder;
- (void)setRoom:(id)arg1;
- (id)getRoom;
- (void)setLocation:(id)arg1;
- (id)getLocation;
- (void)setCanceled:(BOOL)arg1;
- (BOOL)isCanceled;
- (void)setAllDay:(BOOL)arg1;
- (BOOL)isEffectiveAllDay;
- (BOOL)isAllDay;
- (void)setLocalDateTimeEnd:(id)arg1;
- (id)getLocalDateTimeEnd;
- (id)getDisplayDateTimeEnd;
- (void)setLocalDateTimeStart:(id)arg1;
- (id)getLocalDateTimeStart;
- (id)getDisplayDateTimeStart;
- (void)caliberateDominoStartTime:(struct CDateTimeBits *)arg1 endTime:(struct CDateTimeBits *)arg2;
- (void)caliberateTime:(struct CDateTimeBits *)arg1 forHour:(int)arg2;
- (void)setSubject:(id)arg1;
- (id)getSubject;
- (id)getMyEmail;
- (id)getMyName;
- (id)initWithEmail:(id)arg1;
- (id)initWithRecordId:(unsigned short)arg1;
- (id)initWithEvent:(struct ACalendarEvent *)arg1;
- (id)init;
@property(readonly, nonatomic) struct ACalendarRecord *calendarRecord;

@end

