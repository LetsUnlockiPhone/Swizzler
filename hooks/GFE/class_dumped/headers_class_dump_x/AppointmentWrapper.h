/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

#import "_ABAddressBookAddRecord.h"

@class NSDate, NSMutableArray;

@interface AppointmentWrapper : _ABAddressBookAddRecord
{
    struct ACalendarEvent *event;
    unsigned short recordId;
    struct ACalendarRecord calRecord;
    BOOL readOnly;
    NSMutableArray *invitees;
    NSDate *dateTimeStartDisplay;
    NSDate *dateTimeEndDisplay;
    BOOL isShadow;
    struct ACalendarRecord *_pTemplateRecord;
    struct ACalendarRecord _templateRecord;
    unsigned char _dayOfWeekMonthlyMask[5];
    BOOL isAppointmentSubjectRTL;
    BOOL isAppointmentLocationRTL;
    BOOL _isMoreThan32Recipients;
    BOOL _updateForAllAttendees;
    NSDate *_effectiveEndTime;
    NSDate *_effectiveStartTime;
}

+ (int)inviteeGetAvailability:(int)fp8 email:(id)fp12 start:(id)fp16 end:(id)fp20;
+ (void)displayDatesFromDates:(id)fp8;
+ (void)datesFromDisplayDates:(id)fp8;
+ (BOOL)isDifferentDate:(id)fp8 fromDate:(id)fp12;
+ (BOOL)isDifferentString:(id)fp8 fromString:(id)fp12;
+ (BOOL)isDifferentData:(id)fp8 from:(id)fp12;
+ (BOOL)isDifferentInvitees:(id)fp8 from:(id)fp12 checkAvailability:(BOOL)fp16;
+ (BOOL)isDifferentInvitees:(id)fp8 from:(id)fp12;
+ (BOOL)isDifferentNotes:(id)fp8 from:(id)fp12;
+ (BOOL)isDifferentReminder:(id)fp8 from:(id)fp12;
+ (BOOL)isDifferentLocation:(id)fp8 from:(id)fp12;
+ (BOOL)isDifferentSubject:(id)fp8 from:(id)fp12;
+ (id)copyDataOneInstance:(id)fp8 from:(id)fp12;
+ (id)copyData:(id)fp8 from:(id)fp12;
+ (id)date12amFromDate:(id)fp8 nextDay:(BOOL)fp12;
+ (struct CDateTimeBits)nsDateToDateTimeBits:(id)fp8;
+ (id)dateTimeBitsToNsDate:(struct CDateTimeBits)fp8;
+ (id)writeableAppointmentWrapper:(id)fp8;
+ (void)checkTimeZone;
- (void)setUpdateForAllAttendees:(BOOL)fp8;
- (BOOL)updateForAllAttendees;
- (void)setIsMoreThan32Recipients:(BOOL)fp8;
- (BOOL)isMoreThan32Recipients;
- (void)setInvitees:(id)fp8;
- (id)invitees;
- (void)setEffectiveStartTime:(id)fp8;
- (void)setEffectiveEndTime:(id)fp8;
- (void)setIsAppointmentLocationRTL:(BOOL)fp8;
- (BOOL)isAppointmentLocationRTL;
- (void)setIsAppointmentSubjectRTL:(BOOL)fp8;
- (BOOL)isAppointmentSubjectRTL;
- (struct ACalendarEvent *)event;
- (void)setReadOnly:(BOOL)fp8;
- (BOOL)readOnly;
- (void)setRecordId:(unsigned short)fp8;
- (unsigned short)recordId;
- (void)setIsShadow:(BOOL)fp8;
- (BOOL)isShadow;
- (void)setDateTimeEndDisplay:(id)fp8;
- (id)dateTimeEndDisplay;
- (void)setDateTimeStartDisplay:(id)fp8;
- (id)dateTimeStartDisplay;
- (id).cxx_construct;
- (void).cxx_destruct;
- (struct NumberOfPeople)numberOfPeopleAndConflictsWithAttendanceType:(int)fp8;
- (int)numberOfPeopleWithAttendanceType:(int)fp8;
- (id)personWithAttendanceType:(int)fp8 atIndex:(int)fp12;
- (void)dealloc;
- (long)calendarRecordInstance;
- (int)numberOfAttachments;
- (id)stringWithMeetingDetails;
- (id)stringWithMeetingDetailsForInstance:(long)fp8;
- (void)adjustRepeatStartEndDatesTimes;
- (id)findNextOccurenceSince:(id)fp8;
- (int)getMeetingResponse;
- (int)getMyResponse;
- (BOOL)amITheOrganizer;
- (BOOL)isMeeting;
- (void)reloadTemplate;
- (void)loadRecord:(unsigned short)fp8 readOnly:(BOOL)fp12;
- (void)ensureReadOnlyRecordLoaded;
- (void)log;
- (void)removeInvitee:(id)fp8;
- (void)addInvitee:(id)fp8;
- (BOOL)isOrganizerAddedToInvitees;
- (int)compareStartDateWithAppointment:(id)fp8;
- (void)setUpdateVersion:(long)fp8;
- (long)updateVersion;
- (void)setPrivate:(BOOL)fp8;
- (BOOL)isPrivate;
- (void)setAvailability:(int)fp8;
- (int)getAvailability;
- (void)setNotes:(id)fp8;
- (id)getNotes;
- (void)setDateTimeEndRepeat:(id)fp8;
- (id)dateTimeEndRepeat;
- (void)setDateTimeStartRepeat:(id)fp8;
- (id)dateTimeStartRepeat;
- (int)customCount;
- (void)setCount:(int)fp8;
- (int)count;
- (void)setRange:(int)fp8;
- (int)range;
- (void)setRecurrenceInstanceOf:(int)fp8;
- (int)recurrenceInstanceOf;
- (void)setRecurrenceInstance:(int)fp8;
- (int)recurrenceInstance;
- (void)setMonthOfYear:(int)fp8;
- (int)monthOfYear;
- (void)setEndOfMonth:(BOOL)fp8;
- (BOOL)endOfMonth;
- (void)setWeekEnd:(int)fp8;
- (int)weekEnd;
- (void)setDayOfMonthMask:(int)fp8;
- (int)dayOfMonthMask;
- (void)setDayOfMonth:(int)fp8;
- (int)dayOfMonth;
- (void)setDayOfWeekMonthlyMask:(unsigned char (*)[5])fp8;
- (unsigned char (*)[5])dayOfWeekMonthlyMask;
- (void)setDayOfWeekMask:(unsigned char)fp8;
- (unsigned char)dayOfWeekMask;
- (void)setInterval:(int)fp8;
- (int)interval;
- (void)setPattern:(int)fp8;
- (int)pattern;
- (BOOL)exception;
- (BOOL)repeat;
- (void)ensureTemplateRecordLoaded;
- (void)setInstance:(int)fp8;
- (int)getInstance;
- (void)setGoodId:(unsigned long)fp8;
- (unsigned long)goodId;
- (void)setReminder:(int)fp8;
- (int)getReminder;
- (void)setRoom:(id)fp8;
- (id)getRoom;
- (void)setLocation:(id)fp8;
- (id)getLocation;
- (void)setCanceled:(BOOL)fp8;
- (BOOL)isCanceled;
- (void)setAllDay:(BOOL)fp8;
- (BOOL)isEffectiveAllDay;
- (BOOL)isAllDay;
- (void)setLocalDateTimeEnd:(id)fp8;
- (id)getLocalDateTimeEnd;
- (id)getDisplayDateTimeEnd;
- (void)setLocalDateTimeStart:(id)fp8;
- (id)getLocalDateTimeStart;
- (id)getDisplayDateTimeStart;
- (id)effectiveEndTime;
- (id)effectiveStartTime;
- (void)caliberateDominoStartTime:(struct CDateTimeBits *)fp8 endTime:(struct CDateTimeBits *)fp12;
- (void)caliberateTime:(struct CDateTimeBits *)fp8 forHour:(int)fp12;
- (void)setSubject:(id)fp8;
- (id)getSubject;
- (id)getMyEmail;
- (id)getMyName;
- (id)initWithEmail:(id)fp8;
- (id)initWithRecordId:(unsigned short)fp8;
- (id)initWithEvent:(struct ACalendarEvent *)fp8;
- (id)init;
- (struct ACalendarRecord *)calendarRecord;

@end

